
; ******** Source: large-edit.asm
     1                          ; large-edit.asm - Commodore 64 Large Type Editor
     2                          ; Copyright (c) 2025 by David Van Wagner ALL RIGHTS RESERVED
     3                          ; MIT LICENSE
     4                          ; github.com/davervw
     5                          ; www.davevw.com
     6                          
     7                          ; Memory map
     8                          ; 0000-00FF zero page: temps(saved):22,23,24,25,26,27,ff  and not saved: 02,fb,fc,fd,fe
     9                          ; 0100-01FF stack
    10                          ; 0200-03FF more lower RAM for OS/BASIC
    11                          ; 0400-07FF logical screen codes memory (BASIC thinks screen is here)
    12                          ; 0800-09FF BASIC RAM
    13                          ; A000-BFFF BASIC ROM
    14                          ; B400-B7FF color_next (banked RAM under ROM) = changes detected as if no viewports [TODO]
    15                          ; BC00-BFFF color_copy (banked RAM under ROM) = what color memory should be as if no viewports [TODO]
    16                          ; B800-BBFF color_last (banked RAM under ROM) = exact copy of color memory applied with viewports [TODO]
    17                          ; C000-CBFF Large Type Editor machine code program, data, and misc. buffers
    18                          ; CC00-CFFF VIC-II screen displayed
    19                          ; D000-D7FF I/O (and banked chargen ROM, and banked RAM with copy of chargen ROM)
    20                          ; D800-DFFF Color nybles in I/O space (and banked chargen ROM, and banked RAM with copy of chargen ROM)
    21                          ; E000-FFFF BASIC(more) and KERNAL ROM (banked RAM is encoded 4x4 large type characters each using 16 byte PETSCII)
    22                          
    23                          ; Bank/Addreses/Functions
    24                          ; $01  0000  A000  C000 D800  E000
    25                          ; 0    RAM   RAM   RAM  RAM   RAM         64K RAM
    26                          ; 1    RAM   RAM   RAM  CHAR  RAM
    27                          ; 2    RAM   RAM   RAM  CHAR  KERNAL
    28                          ; 3    RAM   BASIC RAM  CHAR  KERNAL
    29                          ; 4    RAM   RAM   RAM  RAM   RAM
    30                          ; 5    RAM   RAM   RAM  I/O   RAM
    31                          ; 6    RAM   RAM   RAM  I/O   KERNAL
    32                          ; 7    RAM   BASIC RAM  I/O   KERNAL      C64 NORMAL
    33                          
    34                          CHROUT = $ffd2
    35                          IRQVECT = $0314
    36                          
    37                          *=$c000
    38  c000 4c05c2                 jmp init
    39                          
    40                          newirq: ; TODO: verify IRQ source is 1/60 second timer
    41  c003 a5ff                   lda $ff
    42  c005 8d11c4                 sta saveff
    43  c008 a522                   lda $22
    44  c00a 8d0bc4                 sta save22
    45  c00d a523                   lda $23
    46  c00f 8d0cc4                 sta save23
    47  c012 a524                   lda $24
    48  c014 8d0dc4                 sta save24
    49  c017 a525                   lda $25
    50  c019 8d0ec4                 sta save25
    51  c01c a526                   lda $26
    52  c01e 8d0fc4                 sta save26
    53  c021 a527                   lda $27
    54  c023 8d10c4                 sta save27
    55  c026 a502                   lda $02
    56  c028 8d12c4                 sta save02
    57  c02b a5fb                   lda $fb
    58  c02d 8d13c4                 sta savefb
    59  c030 a5fc                   lda $fc
    60  c032 8d14c4                 sta savefc
    61  c035 a5fd                   lda $fd
    62  c037 8d15c4                 sta savefd
    63  c03a a5fe                   lda $fe
    64  c03c 8d16c4                 sta savefe
    65                          
    66  c03f a000                   ldy #0    
    67  c041 ad8602                 lda 646
    68  c044 cd19c4                 cmp save_foreground ; detect color change
    69  c047 d00a                   bne +
    70  c049 ad00d8                 lda $d800
    71  c04c 290f                   and #$0f
    72  c04e cd19c4                 cmp save_foreground ; detect clear screen
    73  c051 f017                   beq ++
    74                          ; apply foreground color change to entire screen
    75  c053 8d19c4             +   sta save_foreground
    76  c056 9900d8             -   sta $d800,y
    77  c059 9900d9                 sta $d900,y
    78  c05c 9900da                 sta $da00,y
    79  c05f 9900db                 sta $db00,y    
    80  c062 c8                     iny
    81  c063 d0f1                   bne -
    82  c065 a980                   lda #$80
    83  c067 8d18c4                 sta redraw
    84                          
    85  c06a 84ff               ++  sty $ff
    86  c06c a900                   lda #<($0400)
    87  c06e a204                   ldx #>($0400)
    88  c070 85fb                   sta $fb
    89  c072 86fc                   stx $fc
    90  c074 a920                   lda #<($cc00 + 800)
    91  c076 a2cf                   ldx #>($cc00 + 800)
    92  c078 85fd                   sta $fd
    93  c07a 86fe                   stx $fe
    94  c07c b1fb               -   lda ($fb),y
    95  c07e 2c18c4                 bit redraw
    96  c081 3004                   bmi +++
    97  c083 d1fd                   cmp ($fd),y
    98  c085 f004                   beq +
    99  c087 91fd               +++ sta ($fd),y
   100  c089 e6ff                   inc $ff ; a change occurred, guaranteed not to wrap
   101  c08b c8                 +   iny
   102  c08c c0c8                   cpy #200
   103  c08e 90ec                   bcc -
   104                          
   105                              ; check case change
   106  c090 a501                   lda $01
   107  c092 8502                   sta $02
   108  c094 0907                   ora #7 ; (normal) with I/O
   109  c096 8501                   sta $01
   110  c098 ad18d0                 lda $d018
   111  c09b 2902                   and #2
   112  c09d cd17c4                 cmp lastcase
   113  c0a0 f00a                   beq +
   114  c0a2 8d17c4                 sta lastcase
   115  c0a5 e6ff                   inc $ff ; a change occurred, guaranteed not to wrap
   116  c0a7 a980                   lda #$80
   117  c0a9 8d18c4                 sta redraw
   118  c0ac a502               +   lda $02
   119  c0ae 8501                   sta $01
   120                          
   121  c0b0 a5ff                   lda $ff
   122  c0b2 d003                   bne +
   123  c0b4 4cc6c1                 jmp ++
   124                          
   125  c0b7 a501               +   lda $01
   126  c0b9 8502                   sta $02
   127  c0bb 29f8                   and #$f8 ; all RAM
   128  c0bd 8501                   sta $01    
   129                          
   130  c0bf a000                   ldy #0
   131  c0c1 8422                   sty $22 ; row
   132  c0c3 8423                   sty $23 ; col
   133  c0c5 a900                   lda #<($0400)
   134  c0c7 a204                   ldx #>($0400)
   135  c0c9 85fb                   sta $fb
   136  c0cb 86fc                   stx $fc
   137  c0cd 84fd                   sty $fd ; low byte dest screen (0)
   138  c0cf a2cc                   ldx #>$cc00 ; high byte dest screen
   139  c0d1 86fe                   stx $fe
   140  c0d3 b1fb               -   lda ($fb),y
   141  c0d5 2c18c4                 bit redraw
   142  c0d8 3008                   bmi +
   143  c0da d93bc3                 cmp text_buffer,y
   144  c0dd d003                   bne +
   145  c0df 4c88c1                 jmp skip
   146  c0e2 993bc3             +   sta text_buffer,y
   147  c0e5 a20e                   ldx #$e
   148  c0e7 8627                   stx $27 ; will be high byte encoded screen codes after multiplication
   149  c0e9 0a                     asl
   150  c0ea 2627                   rol $27
   151  c0ec 0a                     asl
   152  c0ed 2627                   rol $27
   153  c0ef 0a                     asl
   154  c0f0 2627                   rol $27
   155  c0f2 0a                     asl
   156  c0f3 2627                   rol $27
   157  c0f5 8526                   sta $26 ; low byte encoded screen codes
   158                          
   159                              ; check lowercase
   160  c0f7 a502                   lda $02
   161  c0f9 0907                   ora #7 ; normal w/ IO
   162  c0fb 8501                   sta $01
   163  c0fd ad18d0                 lda $d018
   164  c100 2902                   and #2
   165  c102 f006                   beq +
   166  c104 a527                   lda $27
   167  c106 0910                   ora #$10
   168  c108 8527                   sta $27
   169  c10a a502               +   lda $02
   170  c10c 29f8                   and #$f8
   171  c10e 8501                   sta $01
   172                             
   173  c110 84ff                   sty $ff ; save index
   174                          
   175                              ; copy the 16 characters (unrolled loop)
   176  c112 a000                   ldy #0
   177  c114 b126                   lda ($26),y
   178  c116 91fd                   sta ($fd),y
   179                          
   180  c118 c8                     iny ;1
   181  c119 b126                   lda ($26),y
   182  c11b 91fd                   sta ($fd),y
   183                          
   184  c11d c8                     iny ;2
   185  c11e b126                   lda ($26),y
   186  c120 91fd                   sta ($fd),y
   187                          
   188  c122 c8                     iny ;3
   189  c123 b126                   lda ($26),y
   190  c125 91fd                   sta ($fd),y
   191                          
   192  c127 c8                     iny ;4
   193  c128 b126                   lda ($26),y
   194  c12a a028                   ldy #40
   195  c12c 91fd                   sta ($fd),y
   196                          
   197  c12e a005                   ldy #5
   198  c130 b126                   lda ($26),y
   199  c132 a029                   ldy #41
   200  c134 91fd                   sta ($fd),y
   201                          
   202  c136 a006                   ldy #6
   203  c138 b126                   lda ($26),y
   204  c13a a02a                   ldy #42
   205  c13c 91fd                   sta ($fd),y
   206                          
   207  c13e a007                   ldy #7
   208  c140 b126                   lda ($26),y
   209  c142 a02b                   ldy #43
   210  c144 91fd                   sta ($fd),y
   211                          
   212  c146 a008                   ldy #8
   213  c148 b126                   lda ($26),y
   214  c14a a050                   ldy #80
   215  c14c 91fd                   sta ($fd),y
   216                          
   217  c14e a009                   ldy #9
   218  c150 b126                   lda ($26),y
   219  c152 a051                   ldy #81
   220  c154 91fd                   sta ($fd),y
   221                          
   222  c156 a00a                   ldy #10
   223  c158 b126                   lda ($26),y
   224  c15a a052                   ldy #82
   225  c15c 91fd                   sta ($fd),y
   226                          
   227  c15e a00b                   ldy #11
   228  c160 b126                   lda ($26),y
   229  c162 a053                   ldy #83
   230  c164 91fd                   sta ($fd),y
   231                          
   232  c166 a00c                   ldy #12
   233  c168 b126                   lda ($26),y
   234  c16a a078                   ldy #120
   235  c16c 91fd                   sta ($fd),y
   236                          
   237  c16e a00d                   ldy #13
   238  c170 b126                   lda ($26),y
   239  c172 a079                   ldy #121
   240  c174 91fd                   sta ($fd),y
   241                          
   242  c176 a00e                   ldy #14
   243  c178 b126                   lda ($26),y
   244  c17a a07a                   ldy #122
   245  c17c 91fd                   sta ($fd),y
   246                          
   247  c17e a00f                   ldy #15
   248  c180 b126                   lda ($26),y
   249  c182 a07b                   ldy #123
   250  c184 91fd                   sta ($fd),y
   251                          
   252  c186 a4ff                   ldy $ff ; restore index
   253                          
   254                          skip
   255  c188 c8                     iny
   256  c189 18                     clc
   257  c18a a5fd                   lda $fd
   258  c18c 6904                   adc #4
   259  c18e 85fd                   sta $fd
   260  c190 9002                   bcc +
   261  c192 e6fe                   inc $fe
   262  c194 e623               +   inc $23
   263  c196 a523                   lda $23
   264  c198 c90a                   cmp #10 ; done columns?
   265  c19a b003                   bcs +
   266  c19c 4cd3c0                 jmp -
   267  c19f a900               +   lda #0
   268  c1a1 8523                   sta $23
   269  c1a3 18                     clc
   270  c1a4 98                     tya
   271  c1a5 691e                   adc #30
   272  c1a7 a8                     tay
   273  c1a8 a5fd                   lda $fd
   274  c1aa 6978                   adc #(160-40)
   275  c1ac 85fd                   sta $fd
   276  c1ae 9002                   bcc +
   277  c1b0 e6fe                   inc $fe
   278  c1b2 e622               +   inc $22
   279  c1b4 a522                   lda $22
   280  c1b6 c905                   cmp #5 ; done rows?
   281  c1b8 b003                   bcs +
   282  c1ba 4cd3c0                 jmp -
   283  c1bd a900               +   lda #0
   284  c1bf 8d18c4                 sta redraw
   285                          
   286                          restorebank
   287  c1c2 a502                   lda $02
   288  c1c4 8501                   sta $01
   289                          
   290  c1c6 ad0bc4             ++  lda save22
   291  c1c9 8522                   sta $22
   292  c1cb ad0cc4                 lda save23
   293  c1ce 8523                   sta $23
   294  c1d0 ad0dc4                 lda save24
   295  c1d3 8524                   sta $24
   296  c1d5 ad0ec4                 lda save25
   297  c1d8 8525                   sta $25
   298  c1da ad0fc4                 lda save26
   299  c1dd 8526                   sta $26
   300  c1df ad10c4                 lda save27
   301  c1e2 8527                   sta $27
   302  c1e4 ad11c4                 lda saveff
   303  c1e7 85ff                   sta $ff
   304  c1e9 ad12c4                 lda save02
   305  c1ec 8502                   sta $02
   306  c1ee ad13c4                 lda savefb
   307  c1f1 85fb                   sta $fb
   308  c1f3 ad14c4                 lda savefc
   309  c1f6 85fc                   sta $fc
   310  c1f8 ad15c4                 lda savefd
   311  c1fb 85fd                   sta $fd
   312  c1fd ad16c4                 lda savefe
   313  c200 85fe                   sta $fe
   314                          
   315                          oldirq = *+1
   316  c202 4c0000                 jmp $0000
   317                          
   318                          init:
   319  c205 2069c2                 jsr copy_charrom
   320  c208 2029c2                 jsr switch_charram
   321  c20b 2034c2                 jsr switch_screen_cc00
   322  c20e a92a                   lda #<title
   323  c210 a2c4                   ldx #>title
   324  c212 208dc2                 jsr strout
   325  c215 20b6c2                 jsr encode_chars
   326  c218 a980                   lda #$80
   327  c21a 8d18c4                 sta redraw
   328  c21d a9ff                   lda #$ff
   329  c21f 8d19c4                 sta save_foreground
   330  c222 204dc2                 jsr swapirq
   331  c225 209ec2                 jsr enqueue_keys
   332  c228 60                     rts
   333                          
   334                          switch_charram:
   335  c229 ad18d0                 lda $d018
   336  c22c 2902                   and #$02
   337  c22e 0934                   ora #$34
   338  c230 8d18d0                 sta $d018
   339  c233 60                     rts
   340                          
   341                          switch_screen_cc00:
   342  c234 a200                   ldx #0
   343  c236 a920                   lda #$20
   344  c238 9d00cc             -   sta $cc00, x
   345  c23b 9d00cd                 sta $cd00, x
   346  c23e 9d00ce                 sta $ce00, x
   347  c241 9d00cf                 sta $cf00, x
   348  c244 e8                     inx
   349  c245 d0f1                   bne -
   350  c247 a904                   lda #$04
   351  c249 8d00dd                 sta $dd00
   352  c24c 60                     rts
   353                          
   354                          swapirq:
   355  c24d a903                   lda #<newirq
   356  c24f a2c0                   ldx #>newirq
   357  c251 ec1503                 cpx IRQVECT+1
   358  c254 f012                   beq +
   359  c256 ac1403                 ldy IRQVECT
   360  c259 8c03c2                 sty oldirq
   361  c25c ac1503                 ldy IRQVECT+1
   362  c25f 8c04c2                 sty oldirq+1
   363  c262 8d1403                 sta IRQVECT
   364  c265 8e1503                 stx IRQVECT+1 
   365  c268 60                 +   rts
   366                          
   367                          ; copy ROM D000-DFFF to RAM D000-DFFF
   368                          copy_charrom:
   369  c269 78                     sei
   370  c26a a000                   ldy #0
   371  c26c 84fb                   sty $fb
   372  c26e a9d0                   lda #$d0
   373  c270 85fc                   sta $fc
   374  c272 a501                   lda $01
   375  c274 aa                     tax
   376  c275 29fb                   and #$fb ; bank 3 CHARGEN ROM
   377  c277 8501                   sta $01
   378  c279 b1fb               -   lda ($fb),y
   379  c27b 91fb                   sta ($fb),y
   380  c27d c8                     iny
   381  c27e d0f9                   bne -
   382  c280 e6fc                   inc $fc
   383  c282 a5fc                   lda $fc
   384  c284 c9e0                   cmp #$e0
   385  c286 90f1                   bcc -
   386  c288 8a                     txa
   387  c289 8501                   sta $01 ; restore to normal
   388  c28b 58                     cli
   389  c28c 60                     rts
   390                          
   391                          strout:
   392  c28d 85fb                   sta $fb
   393  c28f 86fc                   stx $fc
   394  c291 a000                   ldy #0
   395  c293 b1fb               -   lda ($fb),y
   396  c295 f006                   beq +
   397  c297 20d2ff                 jsr CHROUT
   398  c29a c8                     iny
   399  c29b d0f6                   bne -
   400  c29d 60                 +   rts
   401                          
   402                          enqueue_keys:
   403  c29e a913                   lda #19
   404  c2a0 8d7702                 sta 631
   405  c2a3 a911                   lda #17
   406  c2a5 8d7802                 sta 632
   407  c2a8 8d7902                 sta 633
   408  c2ab 8d7a02                 sta 634
   409  c2ae 8d7b02                 sta 635
   410  c2b1 a905                   lda #5
   411  c2b3 85c6                   sta 198
   412  c2b5 60                     rts
   413                          
   414                          encode_chars: ; encode each 8x8 pixel character (8 bytes bitmap) into local buffer (4x4 = 16 byte screencodes)
   415  c2b6 a900                   lda #$00
   416  c2b8 a2d0                   ldx #$d0
   417  c2ba 85fb                   sta $fb
   418  c2bc 86fc                   stx $fc
   419  c2be a900                   lda #0
   420  c2c0 a2e0                   ldx #$e0
   421  c2c2 8524                   sta $24
   422  c2c4 8625                   stx $25
   423  c2c6 a903               -   lda #<bitmap_buffer
   424  c2c8 a2c4                   ldx #>bitmap_buffer
   425  c2ca 85fd                   sta $fd
   426  c2cc 86fe                   stx $fe
   427  c2ce 20e6c2                 jsr copy_char
   428  c2d1 20fec2                 jsr encode_char
   429  c2d4 18                     clc
   430  c2d5 a5fb                   lda $fb
   431  c2d7 6908                   adc #8
   432  c2d9 85fb                   sta $fb
   433  c2db 9002                   bcc +
   434  c2dd e6fc                   inc $fc
   435  c2df a5fc               +   lda $fc
   436  c2e1 c9e0                   cmp #$e0
   437  c2e3 90e1                   bcc -
   438  c2e5 60                     rts
   439                          
   440                          copy_char: ; $fb/fc source (chargen ROM), to $fd/fe destination (normal RAM)
   441  c2e6 78                     sei
   442  c2e7 a501                   lda $01
   443  c2e9 aa                     tax
   444  c2ea 29fb                   and #$fb ; bank 3 CHARGEN ROM
   445  c2ec 8501                   sta $01
   446  c2ee a007                   ldy #7
   447  c2f0 b1fb               -   lda ($fb),y
   448  c2f2 91fd                   sta ($fd),y
   449  c2f4 88                     dey
   450  c2f5 10f9                   bpl -
   451  c2f7 8a                     txa
   452  c2f8 0907                   ora #7 ; normal ROM + I/O
   453  c2fa 8501                   sta $01
   454  c2fc 58                     cli
   455  c2fd 60                     rts    
   456                          
   457                          encode_char: ; given chargen bitmaps at bitmap_buffer+0 to +7, output 16 screen codes representing charcter to pointer $24/$25, pointer += 16, uses $22/$23/$ff
   458  c2fe a200                   ldx #0
   459  c300 a904                   lda #4
   460  c302 8522                   sta $22 ; #rows countdown
   461  c304 a904               --  lda #4
   462  c306 8523                   sta $23 ; #columns countdown
   463  c308 bd03c4             -   lda bitmap_buffer, x
   464  c30b 0a                     asl
   465  c30c 66ff                   ror $ff
   466  c30e 0a                     asl
   467  c30f 66ff                   ror $ff
   468  c311 9d03c4                 sta bitmap_buffer, x
   469  c314 e8                     inx
   470  c315 8a                     txa
   471  c316 2901                   and #1
   472  c318 d0ee                   bne -
   473  c31a a5ff                   lda $ff ; bits from two bytes 01------/23------ are now in order 3210----
   474  c31c 4a                     lsr
   475  c31d 4a                     lsr
   476  c31e 4a                     lsr
   477  c31f 4a                     lsr ; bits now are ----3210 with high bits clear
   478  c320 a8                     tay
   479  c321 b91ac4                 lda lores_codes, y
   480  c324 a000                   ldy #0
   481  c326 9124                   sta ($24), y
   482  c328 e624                   inc $24
   483  c32a d002                   bne +
   484  c32c e625                   inc $25
   485  c32e ca                 +   dex
   486  c32f ca                     dex
   487  c330 c623                   dec $23
   488  c332 d0d4                   bne -
   489  c334 e8                     inx
   490  c335 e8                     inx
   491  c336 c622                   dec $22
   492  c338 d0ca                   bne --
   493  c33a 60                     rts
   494                          
   495                          text_buffer: ; should only need 10x5, but current algorithm uses same offset as screen so 40x5
   496  c33b 2020202020202020...    !byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
   497  c363 2020202020202020...    !byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
   498  c38b 2020202020202020...    !byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
   499  c3b3 2020202020202020...    !byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
   500  c3db 2020202020202020...    !byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
   501                          
   502                          bitmap_buffer:
   503  c403 00000000               !byte 0,0,0,0
   504  c407 00000000               !byte 0,0,0,0
   505                          
   506  c40b 00                 save22: !byte 0
   507  c40c 00                 save23: !byte 0
   508  c40d 00                 save24: !byte 0
   509  c40e 00                 save25: !byte 0
   510  c40f 00                 save26: !byte 0
   511  c410 00                 save27: !byte 0
   512  c411 00                 saveff: !byte 0
   513  c412 00                 save02: !byte 0
   514  c413 00                 savefb: !byte 0
   515  c414 00                 savefc: !byte 0
   516  c415 00                 savefd: !byte 0
   517  c416 00                 savefe: !byte 0
   518                          
   519  c417 00                 lastcase: !byte 0
   520  c418 00                 redraw: !byte 0
   521  c419 00                 save_foreground: !byte 0
   522                          
   523                          ; 16 commodore graphics screen codes that make lo-res 2x2 pixels per character bits in NW,NE,SW,SE order low to high 
   524                          lores_codes:
   525  c41a 60                         !byte $60 ; 00/00
   526  c41b 7e                         !byte $7e ; 10/00 NW
   527  c41c 7c                         !byte $7c ; 01/00 NE
   528  c41d e2                         !byte $e2 ; 11/00
   529  c41e 7b                         !byte $7b ; 00/10 SW
   530  c41f 61                         !byte $61 ; 10/10
   531  c420 ff                         !byte $ff ; 01/10
   532  c421 ec                         !byte $ec ; 11/10
   533  c422 6c                         !byte $6c ; 00/01 SE
   534  c423 7f                         !byte $7f ; 10/01
   535  c424 e1                         !byte $e1 ; 01/01
   536  c425 fb                         !byte $fb ; 11/01
   537  c426 62                         !byte $62 ; 00/11
   538  c427 fc                         !byte $fc ; 10/11
   539  c428 fe                         !byte $fe ; 01/11
   540  c429 e0                         !byte $e0 ; 11/11
   541                          
   542                          title: 
   543  c42a 9312                   !byte 147,18
   544                              ;               1         2         3         4
   545                              ;      1234567890123456789012345678901234567890
   546  c42c 4c41524745205459...    !text "LARGE TYPE EDITOR                       ",146
   547  c455 2843292032303235...    !text "(C) 2025 DAVID R. VAN WAGNER",13
   548  c472 4749544855422e43...    !text "GITHUB.COM/DAVERVW",13
   549  c485 4441564556572e43...    !text "DAVEVW.COM",13
   550  c490 00                     !byte 0
   551                          
   552                          finish:
