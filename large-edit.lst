
; ******** Source: large-edit.asm
     1                          ; large-edit.asm - Commodore 64 Large Type Editor
     2                          ; Copyright (c) 2025 by David Van Wagner ALL RIGHTS RESERVED
     3                          ; MIT LICENSE
     4                          ; github.com/davervw
     5                          ; www.davevw.com
     6                          
     7                          ; Memory map
     8                          ; 0000-00FF zero page: temps(saved):22,23,24,25,26,27,ff  and not saved: 02,fb,fc,fd,fe
     9                          ; 0100-01FF stack
    10                          ; 0200-03FF more lower RAM for OS/BASIC
    11                          ; 0400-07FF logical screen codes memory (BASIC thinks screen is here)
    12                          ; 0800-09FF BASIC RAM
    13                          ; A000-BFFF BASIC ROM
    14                          ; B400-B7FF color_next (banked RAM under ROM) = changes detected as if no viewports [TODO]
    15                          ; BC00-BFFF color_copy (banked RAM under ROM) = what color memory should be as if no viewports [TODO]
    16                          ; B800-BBFF color_last (banked RAM under ROM) = exact copy of color memory applied with viewports [TODO]
    17                          ; C000-CBFF Large Type Editor machine code program, data, and misc. buffers
    18                          ; CC00-CFFF VIC-II screen displayed
    19                          ; D000-D7FF I/O (and banked chargen ROM, and banked RAM with copy of chargen ROM)
    20                          ; D800-DFFF Color nybles in I/O space (and banked chargen ROM, and banked RAM with copy of chargen ROM)
    21                          ; E000-FFFF BASIC(more) and KERNAL ROM (banked RAM is encoded 4x4 large type characters each using 16 byte PETSCII)
    22                          
    23                          ; Bank/Addreses/Functions
    24                          ; $01  0000  A000  C000 D800  E000
    25                          ; 0    RAM   RAM   RAM  RAM   RAM         64K RAM
    26                          ; 1    RAM   RAM   RAM  CHAR  RAM
    27                          ; 2    RAM   RAM   RAM  CHAR  KERNAL
    28                          ; 3    RAM   BASIC RAM  CHAR  KERNAL
    29                          ; 4    RAM   RAM   RAM  RAM   RAM
    30                          ; 5    RAM   RAM   RAM  I/O   RAM
    31                          ; 6    RAM   RAM   RAM  I/O   KERNAL
    32                          ; 7    RAM   BASIC RAM  I/O   KERNAL      C64 NORMAL
    33                          
    34                          CHROUT = $ffd2
    35                          IRQVECT = $0314
    36                          
    37                          *=$c000
    38  c000 4c0dc2                 jmp init
    39                          
    40                          newirq: ; TODO: verify IRQ source is 1/60 second timer
    41  c003 a5ff                   lda $ff
    42  c005 8d27c4                 sta saveff
    43  c008 a522                   lda $22
    44  c00a 8d21c4                 sta save22
    45  c00d a523                   lda $23
    46  c00f 8d22c4                 sta save23
    47  c012 a524                   lda $24
    48  c014 8d23c4                 sta save24
    49  c017 a525                   lda $25
    50  c019 8d24c4                 sta save25
    51  c01c a526                   lda $26
    52  c01e 8d25c4                 sta save26
    53  c021 a527                   lda $27
    54  c023 8d26c4                 sta save27
    55  c026 a502                   lda $02
    56  c028 8d28c4                 sta save02
    57  c02b a5fb                   lda $fb
    58  c02d 8d29c4                 sta savefb
    59  c030 a5fc                   lda $fc
    60  c032 8d2ac4                 sta savefc
    61  c035 a5fd                   lda $fd
    62  c037 8d2bc4                 sta savefd
    63  c03a a5fe                   lda $fe
    64  c03c 8d2cc4                 sta savefe
    65                          
    66  c03f a000                   ldy #0    
    67  c041 ad8602                 lda 646
    68  c044 cd2fc4                 cmp save_foreground ; detect color change
    69  c047 d00a                   bne +
    70  c049 ad00d8                 lda $d800
    71  c04c 290f                   and #$0f
    72  c04e cd2fc4                 cmp save_foreground ; detect clear screen
    73  c051 f017                   beq ++
    74                          ; apply foreground color change to entire screen
    75  c053 8d2fc4             +   sta save_foreground
    76  c056 9900d8             -   sta $d800,y
    77  c059 9900d9                 sta $d900,y
    78  c05c 9900da                 sta $da00,y
    79  c05f 9900db                 sta $db00,y    
    80  c062 c8                     iny
    81  c063 d0f1                   bne -
    82  c065 a980                   lda #$80
    83  c067 8d2ec4                 sta redraw
    84                          
    85  c06a 84ff               ++  sty $ff
    86  c06c ad32c4                 lda viewport
    87  c06f ae33c4                 ldx viewport+1
    88  c072 85fb                   sta $fb
    89  c074 86fc                   stx $fc
    90  c076 a920                   lda #<($cc00 + 800)
    91  c078 a2cf                   ldx #>($cc00 + 800)
    92  c07a 85fd                   sta $fd
    93  c07c 86fe                   stx $fe
    94  c07e b1fb               -   lda ($fb),y
    95  c080 2c2ec4                 bit redraw
    96  c083 3004                   bmi +++
    97  c085 d1fd                   cmp ($fd),y
    98  c087 f004                   beq +
    99  c089 91fd               +++ sta ($fd),y
   100  c08b e6ff                   inc $ff ; a change occurred, guaranteed not to wrap
   101  c08d c8                 +   iny
   102  c08e c0c8                   cpy #200
   103  c090 90ec                   bcc -
   104                          
   105                              ; check case change
   106  c092 a501                   lda $01
   107  c094 8502                   sta $02
   108  c096 0907                   ora #7 ; (normal) with I/O
   109  c098 8501                   sta $01
   110  c09a ad18d0                 lda $d018
   111  c09d 2902                   and #2
   112  c09f cd2dc4                 cmp lastcase
   113  c0a2 f00a                   beq +
   114  c0a4 8d2dc4                 sta lastcase
   115  c0a7 e6ff                   inc $ff ; a change occurred, guaranteed not to wrap
   116  c0a9 a980                   lda #$80
   117  c0ab 8d2ec4                 sta redraw
   118  c0ae a502               +   lda $02
   119  c0b0 8501                   sta $01
   120                          
   121  c0b2 a5ff                   lda $ff
   122  c0b4 d003                   bne +
   123  c0b6 4ccec1                 jmp ++
   124                          
   125  c0b9 a501               +   lda $01
   126  c0bb 8502                   sta $02
   127  c0bd 29f8                   and #$f8 ; all RAM
   128  c0bf 8501                   sta $01    
   129                          
   130  c0c1 a000                   ldy #0
   131  c0c3 8422                   sty $22 ; row
   132  c0c5 8423                   sty $23 ; col
   133  c0c7 ad32c4                 lda viewport
   134  c0ca 18                     clc
   135  c0cb 6d31c4                 adc left
   136  c0ce ae33c4                 ldx viewport+1
   137  c0d1 85fb                   sta $fb
   138  c0d3 86fc                   stx $fc
   139  c0d5 84fd                   sty $fd ; low byte dest screen (0)
   140  c0d7 a2cc                   ldx #>$cc00 ; high byte dest screen
   141  c0d9 86fe                   stx $fe
   142  c0db b1fb               -   lda ($fb),y
   143  c0dd 2c2ec4                 bit redraw
   144  c0e0 3008                   bmi +
   145  c0e2 d951c3                 cmp text_buffer,y
   146  c0e5 d003                   bne +
   147  c0e7 4c90c1                 jmp skip
   148  c0ea 9951c3             +   sta text_buffer,y
   149  c0ed a20e                   ldx #$e
   150  c0ef 8627                   stx $27 ; will be high byte encoded screen codes after multiplication
   151  c0f1 0a                     asl
   152  c0f2 2627                   rol $27
   153  c0f4 0a                     asl
   154  c0f5 2627                   rol $27
   155  c0f7 0a                     asl
   156  c0f8 2627                   rol $27
   157  c0fa 0a                     asl
   158  c0fb 2627                   rol $27
   159  c0fd 8526                   sta $26 ; low byte encoded screen codes
   160                          
   161                              ; check lowercase
   162  c0ff a502                   lda $02
   163  c101 0907                   ora #7 ; normal w/ IO
   164  c103 8501                   sta $01
   165  c105 ad18d0                 lda $d018
   166  c108 2902                   and #2
   167  c10a f006                   beq +
   168  c10c a527                   lda $27
   169  c10e 0910                   ora #$10
   170  c110 8527                   sta $27
   171  c112 a502               +   lda $02
   172  c114 29f8                   and #$f8
   173  c116 8501                   sta $01
   174                             
   175  c118 84ff                   sty $ff ; save index
   176                          
   177                              ; copy the 16 characters (unrolled loop)
   178  c11a a000                   ldy #0
   179  c11c b126                   lda ($26),y
   180  c11e 91fd                   sta ($fd),y
   181                          
   182  c120 c8                     iny ;1
   183  c121 b126                   lda ($26),y
   184  c123 91fd                   sta ($fd),y
   185                          
   186  c125 c8                     iny ;2
   187  c126 b126                   lda ($26),y
   188  c128 91fd                   sta ($fd),y
   189                          
   190  c12a c8                     iny ;3
   191  c12b b126                   lda ($26),y
   192  c12d 91fd                   sta ($fd),y
   193                          
   194  c12f c8                     iny ;4
   195  c130 b126                   lda ($26),y
   196  c132 a028                   ldy #40
   197  c134 91fd                   sta ($fd),y
   198                          
   199  c136 a005                   ldy #5
   200  c138 b126                   lda ($26),y
   201  c13a a029                   ldy #41
   202  c13c 91fd                   sta ($fd),y
   203                          
   204  c13e a006                   ldy #6
   205  c140 b126                   lda ($26),y
   206  c142 a02a                   ldy #42
   207  c144 91fd                   sta ($fd),y
   208                          
   209  c146 a007                   ldy #7
   210  c148 b126                   lda ($26),y
   211  c14a a02b                   ldy #43
   212  c14c 91fd                   sta ($fd),y
   213                          
   214  c14e a008                   ldy #8
   215  c150 b126                   lda ($26),y
   216  c152 a050                   ldy #80
   217  c154 91fd                   sta ($fd),y
   218                          
   219  c156 a009                   ldy #9
   220  c158 b126                   lda ($26),y
   221  c15a a051                   ldy #81
   222  c15c 91fd                   sta ($fd),y
   223                          
   224  c15e a00a                   ldy #10
   225  c160 b126                   lda ($26),y
   226  c162 a052                   ldy #82
   227  c164 91fd                   sta ($fd),y
   228                          
   229  c166 a00b                   ldy #11
   230  c168 b126                   lda ($26),y
   231  c16a a053                   ldy #83
   232  c16c 91fd                   sta ($fd),y
   233                          
   234  c16e a00c                   ldy #12
   235  c170 b126                   lda ($26),y
   236  c172 a078                   ldy #120
   237  c174 91fd                   sta ($fd),y
   238                          
   239  c176 a00d                   ldy #13
   240  c178 b126                   lda ($26),y
   241  c17a a079                   ldy #121
   242  c17c 91fd                   sta ($fd),y
   243                          
   244  c17e a00e                   ldy #14
   245  c180 b126                   lda ($26),y
   246  c182 a07a                   ldy #122
   247  c184 91fd                   sta ($fd),y
   248                          
   249  c186 a00f                   ldy #15
   250  c188 b126                   lda ($26),y
   251  c18a a07b                   ldy #123
   252  c18c 91fd                   sta ($fd),y
   253                          
   254  c18e a4ff                   ldy $ff ; restore index
   255                          
   256                          skip
   257  c190 c8                     iny
   258  c191 18                     clc
   259  c192 a5fd                   lda $fd
   260  c194 6904                   adc #4
   261  c196 85fd                   sta $fd
   262  c198 9002                   bcc +
   263  c19a e6fe                   inc $fe
   264  c19c e623               +   inc $23
   265  c19e a523                   lda $23
   266  c1a0 c90a                   cmp #10 ; done columns?
   267  c1a2 b003                   bcs +
   268  c1a4 4cdbc0                 jmp -
   269  c1a7 a900               +   lda #0
   270  c1a9 8523                   sta $23
   271  c1ab 18                     clc
   272  c1ac 98                     tya
   273  c1ad 691e                   adc #30
   274  c1af a8                     tay
   275  c1b0 a5fd                   lda $fd
   276  c1b2 6978                   adc #(160-40)
   277  c1b4 85fd                   sta $fd
   278  c1b6 9002                   bcc +
   279  c1b8 e6fe                   inc $fe
   280  c1ba e622               +   inc $22
   281  c1bc a522                   lda $22
   282  c1be c905                   cmp #5 ; done rows?
   283  c1c0 b003                   bcs +
   284  c1c2 4cdbc0                 jmp -
   285  c1c5 a900               +   lda #0
   286  c1c7 8d2ec4                 sta redraw
   287                          
   288                          restorebank
   289  c1ca a502                   lda $02
   290  c1cc 8501                   sta $01
   291                          
   292  c1ce ad21c4             ++  lda save22
   293  c1d1 8522                   sta $22
   294  c1d3 ad22c4                 lda save23
   295  c1d6 8523                   sta $23
   296  c1d8 ad23c4                 lda save24
   297  c1db 8524                   sta $24
   298  c1dd ad24c4                 lda save25
   299  c1e0 8525                   sta $25
   300  c1e2 ad25c4                 lda save26
   301  c1e5 8526                   sta $26
   302  c1e7 ad26c4                 lda save27
   303  c1ea 8527                   sta $27
   304  c1ec ad27c4                 lda saveff
   305  c1ef 85ff                   sta $ff
   306  c1f1 ad28c4                 lda save02
   307  c1f4 8502                   sta $02
   308  c1f6 ad29c4                 lda savefb
   309  c1f9 85fb                   sta $fb
   310  c1fb ad2ac4                 lda savefc
   311  c1fe 85fc                   sta $fc
   312  c200 ad2bc4                 lda savefd
   313  c203 85fd                   sta $fd
   314  c205 ad2cc4                 lda savefe
   315  c208 85fe                   sta $fe
   316                          
   317                          oldirq = *+1
   318  c20a 4c0000                 jmp $0000
   319                          
   320                          init:
   321  c20d 207fc2                 jsr copy_charrom
   322  c210 2027c2                 jsr switch_charram
   323  c213 2032c2                 jsr switch_screen_cc00
   324  c216 a944                   lda #<title
   325  c218 a2c4                   ldx #>title
   326  c21a 20a3c2                 jsr strout
   327  c21d 20ccc2                 jsr encode_chars
   328  c220 2063c2                 jsr swapirq
   329  c223 20b4c2                 jsr enqueue_keys
   330  c226 60                     rts
   331                          
   332                          switch_charram:
   333  c227 ad18d0                 lda $d018
   334  c22a 2902                   and #$02
   335  c22c 0934                   ora #$34
   336  c22e 8d18d0                 sta $d018
   337  c231 60                     rts
   338                          
   339                          switch_screen_cc00:
   340  c232 a200                   ldx #0
   341  c234 a920                   lda #$20
   342  c236 9d00cc             -   sta $cc00, x
   343  c239 9d00cd                 sta $cd00, x
   344  c23c 9d00ce                 sta $ce00, x
   345  c23f 9d00cf                 sta $cf00, x
   346  c242 e8                     inx
   347  c243 d0f1                   bne -
   348                          
   349  c245 a904                   lda #$04
   350  c247 8d00dd                 sta $dd00
   351                          
   352  c24a a980                   lda #$80
   353  c24c 8d2ec4                 sta redraw
   354                          
   355  c24f a9ff                   lda #$ff
   356  c251 8d2fc4                 sta save_foreground
   357                          
   358  c254 8e31c4                 stx left ; 0
   359  c257 8e30c4                 stx top ; 0
   360  c25a 8e32c4                 stx viewport ; 0
   361  c25d a904                   lda #>$0400
   362  c25f 8d33c4                 sta viewport+1
   363                          
   364  c262 60                     rts
   365                          
   366                          swapirq:
   367  c263 a903                   lda #<newirq
   368  c265 a2c0                   ldx #>newirq
   369  c267 ec1503                 cpx IRQVECT+1
   370  c26a f012                   beq +
   371  c26c ac1403                 ldy IRQVECT
   372  c26f 8c0bc2                 sty oldirq
   373  c272 ac1503                 ldy IRQVECT+1
   374  c275 8c0cc2                 sty oldirq+1
   375  c278 8d1403                 sta IRQVECT
   376  c27b 8e1503                 stx IRQVECT+1 
   377  c27e 60                 +   rts
   378                          
   379                          ; copy ROM D000-DFFF to RAM D000-DFFF
   380                          copy_charrom:
   381  c27f 78                     sei
   382  c280 a000                   ldy #0
   383  c282 84fb                   sty $fb
   384  c284 a9d0                   lda #$d0
   385  c286 85fc                   sta $fc
   386  c288 a501                   lda $01
   387  c28a aa                     tax
   388  c28b 29fb                   and #$fb ; bank 3 CHARGEN ROM
   389  c28d 8501                   sta $01
   390  c28f b1fb               -   lda ($fb),y
   391  c291 91fb                   sta ($fb),y
   392  c293 c8                     iny
   393  c294 d0f9                   bne -
   394  c296 e6fc                   inc $fc
   395  c298 a5fc                   lda $fc
   396  c29a c9e0                   cmp #$e0
   397  c29c 90f1                   bcc -
   398  c29e 8a                     txa
   399  c29f 8501                   sta $01 ; restore to normal
   400  c2a1 58                     cli
   401  c2a2 60                     rts
   402                          
   403                          strout:
   404  c2a3 85fb                   sta $fb
   405  c2a5 86fc                   stx $fc
   406  c2a7 a000                   ldy #0
   407  c2a9 b1fb               -   lda ($fb),y
   408  c2ab f006                   beq +
   409  c2ad 20d2ff                 jsr CHROUT
   410  c2b0 c8                     iny
   411  c2b1 d0f6                   bne -
   412  c2b3 60                 +   rts
   413                          
   414                          enqueue_keys:
   415  c2b4 a913                   lda #19
   416  c2b6 8d7702                 sta 631
   417  c2b9 a911                   lda #17
   418  c2bb 8d7802                 sta 632
   419  c2be 8d7902                 sta 633
   420  c2c1 8d7a02                 sta 634
   421  c2c4 8d7b02                 sta 635
   422  c2c7 a905                   lda #5
   423  c2c9 85c6                   sta 198
   424  c2cb 60                     rts
   425                          
   426                          encode_chars: ; encode each 8x8 pixel character (8 bytes bitmap) into local buffer (4x4 = 16 byte screencodes)
   427  c2cc a900                   lda #$00
   428  c2ce a2d0                   ldx #$d0
   429  c2d0 85fb                   sta $fb
   430  c2d2 86fc                   stx $fc
   431  c2d4 a900                   lda #0
   432  c2d6 a2e0                   ldx #$e0
   433  c2d8 8524                   sta $24
   434  c2da 8625                   stx $25
   435  c2dc a919               -   lda #<bitmap_buffer
   436  c2de a2c4                   ldx #>bitmap_buffer
   437  c2e0 85fd                   sta $fd
   438  c2e2 86fe                   stx $fe
   439  c2e4 20fcc2                 jsr copy_char
   440  c2e7 2014c3                 jsr encode_char
   441  c2ea 18                     clc
   442  c2eb a5fb                   lda $fb
   443  c2ed 6908                   adc #8
   444  c2ef 85fb                   sta $fb
   445  c2f1 9002                   bcc +
   446  c2f3 e6fc                   inc $fc
   447  c2f5 a5fc               +   lda $fc
   448  c2f7 c9e0                   cmp #$e0
   449  c2f9 90e1                   bcc -
   450  c2fb 60                     rts
   451                          
   452                          copy_char: ; $fb/fc source (chargen ROM), to $fd/fe destination (normal RAM)
   453  c2fc 78                     sei
   454  c2fd a501                   lda $01
   455  c2ff aa                     tax
   456  c300 29fb                   and #$fb ; bank 3 CHARGEN ROM
   457  c302 8501                   sta $01
   458  c304 a007                   ldy #7
   459  c306 b1fb               -   lda ($fb),y
   460  c308 91fd                   sta ($fd),y
   461  c30a 88                     dey
   462  c30b 10f9                   bpl -
   463  c30d 8a                     txa
   464  c30e 0907                   ora #7 ; normal ROM + I/O
   465  c310 8501                   sta $01
   466  c312 58                     cli
   467  c313 60                     rts    
   468                          
   469                          encode_char: ; given chargen bitmaps at bitmap_buffer+0 to +7, output 16 screen codes representing charcter to pointer $24/$25, pointer += 16, uses $22/$23/$ff
   470  c314 a200                   ldx #0
   471  c316 a904                   lda #4
   472  c318 8522                   sta $22 ; #rows countdown
   473  c31a a904               --  lda #4
   474  c31c 8523                   sta $23 ; #columns countdown
   475  c31e bd19c4             -   lda bitmap_buffer, x
   476  c321 0a                     asl
   477  c322 66ff                   ror $ff
   478  c324 0a                     asl
   479  c325 66ff                   ror $ff
   480  c327 9d19c4                 sta bitmap_buffer, x
   481  c32a e8                     inx
   482  c32b 8a                     txa
   483  c32c 2901                   and #1
   484  c32e d0ee                   bne -
   485  c330 a5ff                   lda $ff ; bits from two bytes 01------/23------ are now in order 3210----
   486  c332 4a                     lsr
   487  c333 4a                     lsr
   488  c334 4a                     lsr
   489  c335 4a                     lsr ; bits now are ----3210 with high bits clear
   490  c336 a8                     tay
   491  c337 b934c4                 lda lores_codes, y
   492  c33a a000                   ldy #0
   493  c33c 9124                   sta ($24), y
   494  c33e e624                   inc $24
   495  c340 d002                   bne +
   496  c342 e625                   inc $25
   497  c344 ca                 +   dex
   498  c345 ca                     dex
   499  c346 c623                   dec $23
   500  c348 d0d4                   bne -
   501  c34a e8                     inx
   502  c34b e8                     inx
   503  c34c c622                   dec $22
   504  c34e d0ca                   bne --
   505  c350 60                     rts
   506                          
   507                          text_buffer: ; should only need 10x5, but current algorithm uses same offset as screen so 40x5
   508  c351 2020202020202020...    !byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
   509  c379 2020202020202020...    !byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
   510  c3a1 2020202020202020...    !byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
   511  c3c9 2020202020202020...    !byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
   512  c3f1 2020202020202020...    !byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
   513                          
   514                          bitmap_buffer:
   515  c419 00000000               !byte 0,0,0,0
   516  c41d 00000000               !byte 0,0,0,0
   517                          
   518  c421 00                 save22: !byte 0
   519  c422 00                 save23: !byte 0
   520  c423 00                 save24: !byte 0
   521  c424 00                 save25: !byte 0
   522  c425 00                 save26: !byte 0
   523  c426 00                 save27: !byte 0
   524  c427 00                 saveff: !byte 0
   525  c428 00                 save02: !byte 0
   526  c429 00                 savefb: !byte 0
   527  c42a 00                 savefc: !byte 0
   528  c42b 00                 savefd: !byte 0
   529  c42c 00                 savefe: !byte 0
   530                          
   531  c42d 00                 lastcase: !byte 0
   532  c42e 00                 redraw: !byte 0
   533  c42f 00                 save_foreground: !byte 0
   534  c430 00                 top: !byte 0
   535  c431 00                 left: !byte 0
   536  c432 0000               viewport: !word 0 ; address to column 0
   537                          
   538                          ; 16 commodore graphics screen codes that make lo-res 2x2 pixels per character bits in NW,NE,SW,SE order low to high 
   539                          lores_codes:
   540  c434 60                         !byte $60 ; 00/00
   541  c435 7e                         !byte $7e ; 10/00 NW
   542  c436 7c                         !byte $7c ; 01/00 NE
   543  c437 e2                         !byte $e2 ; 11/00
   544  c438 7b                         !byte $7b ; 00/10 SW
   545  c439 61                         !byte $61 ; 10/10
   546  c43a ff                         !byte $ff ; 01/10
   547  c43b ec                         !byte $ec ; 11/10
   548  c43c 6c                         !byte $6c ; 00/01 SE
   549  c43d 7f                         !byte $7f ; 10/01
   550  c43e e1                         !byte $e1 ; 01/01
   551  c43f fb                         !byte $fb ; 11/01
   552  c440 62                         !byte $62 ; 00/11
   553  c441 fc                         !byte $fc ; 10/11
   554  c442 fe                         !byte $fe ; 01/11
   555  c443 e0                         !byte $e0 ; 11/11
   556                          
   557                          title: 
   558  c444 9312                   !byte 147,18
   559                              ;               1         2         3         4
   560                              ;      1234567890123456789012345678901234567890
   561  c446 4c41524745205459...    !text "LARGE TYPE EDITOR                       ",146
   562  c46f 2843292032303235...    !text "(C) 2025 DAVID R. VAN WAGNER",13
   563  c48c 4749544855422e43...    !text "GITHUB.COM/DAVERVW",13
   564  c49f 4441564556572e43...    !text "DAVEVW.COM",13
   565  c4aa 00                     !byte 0
   566                          
   567                          finish:
