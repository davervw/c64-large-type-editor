
; ******** Source: large-edit.asm
     1                          ; large-edit.asm - Commodore 64 Large Type Editor
     2                          ; Copyright (c) 2025 by David Van Wagner ALL RIGHTS RESERVED
     3                          ; MIT LICENSE
     4                          ; github.com/davervw
     5                          ; www.davevw.com
     6                          
     7                          ; Memory map
     8                          ; 0000-00FF zero page: temps(saved):22,23,24,25,26,27,ff  and not saved: 02,fb,fc,fd,fe
     9                          ; 0100-01FF stack
    10                          ; 0200-03FF more lower RAM for OS/BASIC
    11                          ; 0400-07FF logical screen codes memory (BASIC thinks screen is here)
    12                          ; 0800-09FF BASIC RAM
    13                          ; A000-BFFF BASIC ROM
    14                          ; B400-B7FF color_next (banked RAM under ROM) = changes detected as if no viewports [TODO]
    15                          ; BC00-BFFF color_copy (banked RAM under ROM) = what color memory should be as if no viewports [TODO]
    16                          ; B800-BBFF color_last (banked RAM under ROM) = exact copy of color memory applied with viewports [TODO]
    17                          ; C000-CBFF Large Type Editor machine code program, data, and misc. buffers
    18                          ; CC00-CFFF VIC-II screen displayed
    19                          ; D000-D7FF I/O (and banked chargen ROM, and banked RAM with copy of chargen ROM)
    20                          ; D800-DFFF Color nybles in I/O space (and banked chargen ROM, and banked RAM with copy of chargen ROM)
    21                          ; E000-FFFF BASIC(more) and KERNAL ROM (banked RAM is encoded 4x4 large type characters each using 16 byte PETSCII)
    22                          
    23                          ; Bank/Addreses/Functions
    24                          ; $01  0000  A000  C000 D800  E000
    25                          ; 0    RAM   RAM   RAM  RAM   RAM         64K RAM
    26                          ; 1    RAM   RAM   RAM  CHAR  RAM
    27                          ; 2    RAM   RAM   RAM  CHAR  KERNAL
    28                          ; 3    RAM   BASIC RAM  CHAR  KERNAL
    29                          ; 4    RAM   RAM   RAM  RAM   RAM
    30                          ; 5    RAM   RAM   RAM  I/O   RAM
    31                          ; 6    RAM   RAM   RAM  I/O   KERNAL
    32                          ; 7    RAM   BASIC RAM  I/O   KERNAL      C64 NORMAL
    33                          
    34                          CHROUT = $ffd2
    35                          IRQVECT = $0314
    36                          
    37                          *=$c000
    38  c000 4cfbc1                 jmp init
    39                          
    40                          newirq:
    41  c003 a5ff                   lda $ff
    42  c005 8d07c4                 sta saveff
    43  c008 a522                   lda $22
    44  c00a 8d01c4                 sta save22
    45  c00d a523                   lda $23
    46  c00f 8d02c4                 sta save23
    47  c012 a524                   lda $24
    48  c014 8d03c4                 sta save24
    49  c017 a525                   lda $25
    50  c019 8d04c4                 sta save25
    51  c01c a526                   lda $26
    52  c01e 8d05c4                 sta save26
    53  c021 a527                   lda $27
    54  c023 8d06c4                 sta save27
    55  c026 a502                   lda $02
    56  c028 8d08c4                 sta save02
    57  c02b a5fb                   lda $fb
    58  c02d 8d09c4                 sta savefb
    59  c030 a5fc                   lda $fc
    60  c032 8d0ac4                 sta savefc
    61  c035 a5fd                   lda $fd
    62  c037 8d0bc4                 sta savefd
    63  c03a a5fe                   lda $fe
    64  c03c 8d0cc4                 sta savefe
    65                          
    66  c03f a200                   ldx #0    
    67  c041 ad8602                 lda 646
    68  c044 cd0fc4                 cmp save_foreground ; detect color change
    69  c047 d00a                   bne +
    70  c049 ad00d8                 lda $d800
    71  c04c 290f                   and #$0f
    72  c04e cd0fc4                 cmp save_foreground ; detect clear screen
    73  c051 f017                   beq ++
    74                          ; apply foreground color change to entire screen
    75  c053 8d0fc4             +   sta save_foreground
    76  c056 9d00d8             -   sta $d800,x
    77  c059 9d00d9                 sta $d900,x
    78  c05c 9d00da                 sta $da00,x
    79  c05f 9d00db                 sta $db00,x    
    80  c062 e8                     inx
    81  c063 d0f1                   bne -
    82  c065 a980                   lda #$80
    83  c067 8d0ec4                 sta redraw
    84                          
    85  c06a 86ff               ++  stx $ff
    86  c06c bd0004             -   lda $0400,x
    87  c06f 2c0ec4                 bit redraw
    88  c072 3005                   bmi +++
    89  c074 dd20cf                 cmp $cc00 + 800,x
    90  c077 f005                   beq +
    91  c079 9d20cf             +++ sta $cc00 + 800,x
    92  c07c e6ff                   inc $ff ; a change occurred, guaranteed not not wrap
    93  c07e 18                 +   clc
    94  c07f e8                     inx
    95  c080 e0c8                   cpx #200
    96  c082 90e8                   bcc -
    97                          
    98                              ; check case change
    99  c084 a501                   lda $01
   100  c086 8502                   sta $02
   101  c088 0907                   ora #7 ; (normal) with I/O
   102  c08a 8501                   sta $01
   103  c08c ad18d0                 lda $d018
   104  c08f 2902                   and #2
   105  c091 cd0dc4                 cmp lastcase
   106  c094 f00a                   beq +
   107  c096 8d0dc4                 sta lastcase
   108  c099 e6ff                   inc $ff ; a change occurred, guaranteed not to wrap
   109  c09b a980                   lda #$80
   110  c09d 8d0ec4                 sta redraw
   111  c0a0 a502               +   lda $02
   112  c0a2 8501                   sta $01
   113                          
   114  c0a4 a5ff                   lda $ff
   115  c0a6 d003                   bne +
   116  c0a8 4cbcc1                 jmp ++
   117                          
   118  c0ab a501               +   lda $01
   119  c0ad 8502                   sta $02
   120  c0af 29f8                   and #$f8 ; all RAM
   121  c0b1 8501                   sta $01    
   122                          
   123  c0b3 a000                   ldy #0
   124  c0b5 8422                   sty $22 ; row
   125  c0b7 8423                   sty $23 ; col
   126  c0b9 84fb                   sty $fb ; low byte source screen
   127  c0bb a204                   ldx #4
   128  c0bd 86fc                   stx $fc ; high byte source screen
   129  c0bf 84fd                   sty $fd ; low byte dest screen
   130  c0c1 a2cc                   ldx #$cc ; high byte dest screen
   131  c0c3 86fe                   stx $fe
   132  c0c5 b1fb               -   lda ($fb),y
   133  c0c7 2c0ec4                 bit redraw
   134  c0ca 3008                   bmi +
   135  c0cc d931c3                 cmp text_buffer,y
   136  c0cf d003                   bne +
   137  c0d1 4c7ec1                 jmp skip
   138  c0d4 9931c3             +   sta text_buffer,y
   139  c0d7 a20e                   ldx #$e
   140  c0d9 8627                   stx $27 ; will be high byte encoded screen codes after multiplication
   141  c0db 0a                     asl
   142  c0dc 2627                   rol $27
   143  c0de 0a                     asl
   144  c0df 2627                   rol $27
   145  c0e1 0a                     asl
   146  c0e2 2627                   rol $27
   147  c0e4 0a                     asl
   148  c0e5 2627                   rol $27
   149  c0e7 8526                   sta $26 ; low byte encoded screen codes
   150                          
   151                              ; check lowercase
   152  c0e9 a502                   lda $02
   153  c0eb 0907                   ora #7 ; normal w/ IO
   154  c0ed 8501                   sta $01
   155  c0ef ad18d0                 lda $d018
   156  c0f2 2902                   and #2
   157  c0f4 f006                   beq +
   158  c0f6 a527                   lda $27
   159  c0f8 0910                   ora #$10
   160  c0fa 8527                   sta $27
   161  c0fc a502               +   lda $02
   162  c0fe 29f8                   and #$f8
   163  c100 8501                   sta $01
   164                             
   165  c102 84ff                   sty $ff
   166                          
   167  c104 a000                   ldy #0
   168  c106 b126                   lda ($26),y
   169  c108 91fd                   sta ($fd),y
   170                          
   171  c10a a001                   ldy #1
   172  c10c b126                   lda ($26),y
   173  c10e 91fd                   sta ($fd),y
   174                          
   175  c110 a002                   ldy #2
   176  c112 b126                   lda ($26),y
   177  c114 91fd                   sta ($fd),y
   178                          
   179  c116 a003                   ldy #3
   180  c118 b126                   lda ($26),y
   181  c11a 91fd                   sta ($fd),y
   182                          
   183  c11c a004                   ldy #4
   184  c11e b126                   lda ($26),y
   185  c120 a028                   ldy #40
   186  c122 91fd                   sta ($fd),y
   187                          
   188  c124 a005                   ldy #5
   189  c126 b126                   lda ($26),y
   190  c128 a029                   ldy #41
   191  c12a 91fd                   sta ($fd),y
   192                          
   193  c12c a006                   ldy #6
   194  c12e b126                   lda ($26),y
   195  c130 a02a                   ldy #42
   196  c132 91fd                   sta ($fd),y
   197                          
   198  c134 a007                   ldy #7
   199  c136 b126                   lda ($26),y
   200  c138 a02b                   ldy #43
   201  c13a 91fd                   sta ($fd),y
   202                          
   203  c13c a008                   ldy #8
   204  c13e b126                   lda ($26),y
   205  c140 a050                   ldy #80
   206  c142 91fd                   sta ($fd),y
   207                          
   208  c144 a009                   ldy #9
   209  c146 b126                   lda ($26),y
   210  c148 a051                   ldy #81
   211  c14a 91fd                   sta ($fd),y
   212                          
   213  c14c a00a                   ldy #10
   214  c14e b126                   lda ($26),y
   215  c150 a052                   ldy #82
   216  c152 91fd                   sta ($fd),y
   217                          
   218  c154 a00b                   ldy #11
   219  c156 b126                   lda ($26),y
   220  c158 a053                   ldy #83
   221  c15a 91fd                   sta ($fd),y
   222                          
   223  c15c a00c                   ldy #12
   224  c15e b126                   lda ($26),y
   225  c160 a078                   ldy #120
   226  c162 91fd                   sta ($fd),y
   227                          
   228  c164 a00d                   ldy #13
   229  c166 b126                   lda ($26),y
   230  c168 a079                   ldy #121
   231  c16a 91fd                   sta ($fd),y
   232                          
   233  c16c a00e                   ldy #14
   234  c16e b126                   lda ($26),y
   235  c170 a07a                   ldy #122
   236  c172 91fd                   sta ($fd),y
   237                          
   238  c174 a00f                   ldy #15
   239  c176 b126                   lda ($26),y
   240  c178 a07b                   ldy #123
   241  c17a 91fd                   sta ($fd),y
   242                          
   243  c17c a4ff                   ldy $ff
   244                          
   245                          skip
   246  c17e c8                     iny
   247  c17f 18                     clc
   248  c180 a5fd                   lda $fd
   249  c182 6904                   adc #4
   250  c184 85fd                   sta $fd
   251  c186 9002                   bcc +
   252  c188 e6fe                   inc $fe
   253  c18a e623               +   inc $23
   254  c18c a523                   lda $23
   255  c18e c90a                   cmp #10
   256  c190 b003                   bcs +
   257  c192 4cc5c0                 jmp -
   258  c195 a900               +   lda #0
   259  c197 8523                   sta $23
   260  c199 18                     clc
   261  c19a 98                     tya
   262  c19b 691e                   adc #30
   263  c19d a8                     tay
   264  c19e a5fd                   lda $fd
   265  c1a0 6978                   adc #(160-40)
   266  c1a2 85fd                   sta $fd
   267  c1a4 9002                   bcc +
   268  c1a6 e6fe                   inc $fe
   269  c1a8 e622               +   inc $22
   270  c1aa a522                   lda $22
   271  c1ac c905                   cmp #5
   272  c1ae b003                   bcs +
   273  c1b0 4cc5c0                 jmp -
   274  c1b3 a900               +   lda #0
   275  c1b5 8d0ec4                 sta redraw
   276                          
   277                          restorebank
   278  c1b8 a502                   lda $02
   279  c1ba 8501                   sta $01
   280                          
   281  c1bc ad01c4             ++  lda save22
   282  c1bf 8522                   sta $22
   283  c1c1 ad02c4                 lda save23
   284  c1c4 8523                   sta $23
   285  c1c6 ad03c4                 lda save24
   286  c1c9 8524                   sta $24
   287  c1cb ad04c4                 lda save25
   288  c1ce 8525                   sta $25
   289  c1d0 ad05c4                 lda save26
   290  c1d3 8526                   sta $26
   291  c1d5 ad06c4                 lda save27
   292  c1d8 8527                   sta $27
   293  c1da ad07c4                 lda saveff
   294  c1dd 85ff                   sta $ff
   295  c1df ad08c4                 lda save02
   296  c1e2 8502                   sta $02
   297  c1e4 ad09c4                 lda savefb
   298  c1e7 85fb                   sta $fb
   299  c1e9 ad0ac4                 lda savefc
   300  c1ec 85fc                   sta $fc
   301  c1ee ad0bc4                 lda savefd
   302  c1f1 85fd                   sta $fd
   303  c1f3 ad0cc4                 lda savefe
   304  c1f6 85fe                   sta $fe
   305                          
   306                          oldirq = *+1
   307  c1f8 4c0000                 jmp $0000
   308                          
   309                          init:
   310  c1fb 205fc2                 jsr copy_charrom
   311  c1fe 201fc2                 jsr switch_charram
   312  c201 202ac2                 jsr switch_screen_cc00
   313  c204 a920                   lda #<title
   314  c206 a2c4                   ldx #>title
   315  c208 2083c2                 jsr strout
   316  c20b 20acc2                 jsr encode_chars
   317  c20e a980                   lda #$80
   318  c210 8d0ec4                 sta redraw
   319  c213 a9ff                   lda #$ff
   320  c215 8d0fc4                 sta save_foreground
   321  c218 2043c2                 jsr swapirq
   322  c21b 2094c2                 jsr enqueue_keys
   323  c21e 60                     rts
   324                          
   325                          switch_charram:
   326  c21f ad18d0                 lda $d018
   327  c222 2902                   and #$02
   328  c224 0934                   ora #$34
   329  c226 8d18d0                 sta $d018
   330  c229 60                     rts
   331                          
   332                          switch_screen_cc00:
   333  c22a a200                   ldx #0
   334  c22c a920                   lda #$20
   335  c22e 9d00cc             -   sta $cc00, x
   336  c231 9d00cd                 sta $cd00, x
   337  c234 9d00ce                 sta $ce00, x
   338  c237 9d00cf                 sta $cf00, x
   339  c23a e8                     inx
   340  c23b d0f1                   bne -
   341  c23d a904                   lda #$04
   342  c23f 8d00dd                 sta $dd00
   343  c242 60                     rts
   344                          
   345                          swapirq:
   346  c243 a903                   lda #<newirq
   347  c245 a2c0                   ldx #>newirq
   348  c247 ec1503                 cpx IRQVECT+1
   349  c24a f012                   beq +
   350  c24c ac1403                 ldy IRQVECT
   351  c24f 8cf9c1                 sty oldirq
   352  c252 ac1503                 ldy IRQVECT+1
   353  c255 8cfac1                 sty oldirq+1
   354  c258 8d1403                 sta IRQVECT
   355  c25b 8e1503                 stx IRQVECT+1 
   356  c25e 60                 +   rts
   357                          
   358                          ; copy ROM D000-DFFF to RAM D000-DFFF
   359                          copy_charrom:
   360  c25f 78                     sei
   361  c260 a000                   ldy #0
   362  c262 84fb                   sty $fb
   363  c264 a9d0                   lda #$d0
   364  c266 85fc                   sta $fc
   365  c268 a501                   lda $01
   366  c26a aa                     tax
   367  c26b 29fb                   and #$fb ; bank 3 CHARGEN ROM
   368  c26d 8501                   sta $01
   369  c26f b1fb               -   lda ($fb),y
   370  c271 91fb                   sta ($fb),y
   371  c273 c8                     iny
   372  c274 d0f9                   bne -
   373  c276 e6fc                   inc $fc
   374  c278 a5fc                   lda $fc
   375  c27a c9e0                   cmp #$e0
   376  c27c 90f1                   bcc -
   377  c27e 8a                     txa
   378  c27f 8501                   sta $01 ; restore to normal
   379  c281 58                     cli
   380  c282 60                     rts
   381                          
   382                          strout:
   383  c283 85fb                   sta $fb
   384  c285 86fc                   stx $fc
   385  c287 a000                   ldy #0
   386  c289 b1fb               -   lda ($fb),y
   387  c28b f006                   beq +
   388  c28d 20d2ff                 jsr CHROUT
   389  c290 c8                     iny
   390  c291 d0f6                   bne -
   391  c293 60                 +   rts
   392                          
   393                          enqueue_keys:
   394  c294 a913                   lda #19
   395  c296 8d7702                 sta 631
   396  c299 a911                   lda #17
   397  c29b 8d7802                 sta 632
   398  c29e 8d7902                 sta 633
   399  c2a1 8d7a02                 sta 634
   400  c2a4 8d7b02                 sta 635
   401  c2a7 a905                   lda #5
   402  c2a9 85c6                   sta 198
   403  c2ab 60                     rts
   404                          
   405                          encode_chars: ; encode each 8x8 pixel character (8 bytes bitmap) into local buffer (4x4 = 16 byte screencodes)
   406  c2ac a900                   lda #$00
   407  c2ae a2d0                   ldx #$d0
   408  c2b0 85fb                   sta $fb
   409  c2b2 86fc                   stx $fc
   410  c2b4 a900                   lda #0
   411  c2b6 a2e0                   ldx #$e0
   412  c2b8 8524                   sta $24
   413  c2ba 8625                   stx $25
   414  c2bc a9f9               -   lda #<bitmap_buffer
   415  c2be a2c3                   ldx #>bitmap_buffer
   416  c2c0 85fd                   sta $fd
   417  c2c2 86fe                   stx $fe
   418  c2c4 20dcc2                 jsr copy_char
   419  c2c7 20f4c2                 jsr encode_char
   420  c2ca 18                     clc
   421  c2cb a5fb                   lda $fb
   422  c2cd 6908                   adc #8
   423  c2cf 85fb                   sta $fb
   424  c2d1 9002                   bcc +
   425  c2d3 e6fc                   inc $fc
   426  c2d5 a5fc               +   lda $fc
   427  c2d7 c9e0                   cmp #$e0
   428  c2d9 90e1                   bcc -
   429  c2db 60                     rts
   430                          
   431                          copy_char: ; $fb/fc source (chargen ROM), to $fd/fe destination (normal RAM)
   432  c2dc 78                     sei
   433  c2dd a501                   lda $01
   434  c2df aa                     tax
   435  c2e0 29fb                   and #$fb ; bank 3 CHARGEN ROM
   436  c2e2 8501                   sta $01
   437  c2e4 a007                   ldy #7
   438  c2e6 b1fb               -   lda ($fb),y
   439  c2e8 91fd                   sta ($fd),y
   440  c2ea 88                     dey
   441  c2eb 10f9                   bpl -
   442  c2ed 8a                     txa
   443  c2ee 0907                   ora #7 ; normal ROM + I/O
   444  c2f0 8501                   sta $01
   445  c2f2 58                     cli
   446  c2f3 60                     rts    
   447                          
   448                          encode_char: ; given chargen bitmaps at bitmap_buffer+0 to +7, output 16 screen codes representing charcter to pointer $24/$25, pointer += 16, uses $22/$23/$ff
   449  c2f4 a200                   ldx #0
   450  c2f6 a904                   lda #4
   451  c2f8 8522                   sta $22 ; #rows countdown
   452  c2fa a904               --  lda #4
   453  c2fc 8523                   sta $23 ; #columns countdown
   454  c2fe bdf9c3             -   lda bitmap_buffer, x
   455  c301 0a                     asl
   456  c302 66ff                   ror $ff
   457  c304 0a                     asl
   458  c305 66ff                   ror $ff
   459  c307 9df9c3                 sta bitmap_buffer, x
   460  c30a e8                     inx
   461  c30b 8a                     txa
   462  c30c 2901                   and #1
   463  c30e d0ee                   bne -
   464  c310 a5ff                   lda $ff ; bits from two bytes 01------/23------ are now in order 3210----
   465  c312 4a                     lsr
   466  c313 4a                     lsr
   467  c314 4a                     lsr
   468  c315 4a                     lsr ; bits now are ----3210 with high bits clear
   469  c316 a8                     tay
   470  c317 b910c4                 lda lores_codes, y
   471  c31a a000                   ldy #0
   472  c31c 9124                   sta ($24), y
   473  c31e e624                   inc $24
   474  c320 d002                   bne +
   475  c322 e625                   inc $25
   476  c324 ca                 +   dex
   477  c325 ca                     dex
   478  c326 c623                   dec $23
   479  c328 d0d4                   bne -
   480  c32a e8                     inx
   481  c32b e8                     inx
   482  c32c c622                   dec $22
   483  c32e d0ca                   bne --
   484  c330 60                     rts
   485                          
   486                          text_buffer: ; should only need 10x5, but current algorithm uses same offset as screen so 40x5
   487  c331 2020202020202020...    !byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
   488  c359 2020202020202020...    !byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
   489  c381 2020202020202020...    !byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
   490  c3a9 2020202020202020...    !byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
   491  c3d1 2020202020202020...    !byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
   492                          
   493                          bitmap_buffer:
   494  c3f9 00000000               !byte 0,0,0,0
   495  c3fd 00000000               !byte 0,0,0,0
   496                          
   497  c401 00                 save22: !byte 0
   498  c402 00                 save23: !byte 0
   499  c403 00                 save24: !byte 0
   500  c404 00                 save25: !byte 0
   501  c405 00                 save26: !byte 0
   502  c406 00                 save27: !byte 0
   503  c407 00                 saveff: !byte 0
   504  c408 00                 save02: !byte 0
   505  c409 00                 savefb: !byte 0
   506  c40a 00                 savefc: !byte 0
   507  c40b 00                 savefd: !byte 0
   508  c40c 00                 savefe: !byte 0
   509                          
   510  c40d 00                 lastcase: !byte 0
   511  c40e 00                 redraw: !byte 0
   512  c40f 00                 save_foreground: !byte 0
   513                          
   514                          ; 16 commodore graphics screen codes that make lo-res 2x2 pixels per character bits in NW,NE,SW,SE order low to high 
   515                          lores_codes:
   516  c410 60                         !byte $60 ; 00/00
   517  c411 7e                         !byte $7e ; 10/00 NW
   518  c412 7c                         !byte $7c ; 01/00 NE
   519  c413 e2                         !byte $e2 ; 11/00
   520  c414 7b                         !byte $7b ; 00/10 SW
   521  c415 61                         !byte $61 ; 10/10
   522  c416 ff                         !byte $ff ; 01/10
   523  c417 ec                         !byte $ec ; 11/10
   524  c418 6c                         !byte $6c ; 00/01 SE
   525  c419 7f                         !byte $7f ; 10/01
   526  c41a e1                         !byte $e1 ; 01/01
   527  c41b fb                         !byte $fb ; 11/01
   528  c41c 62                         !byte $62 ; 00/11
   529  c41d fc                         !byte $fc ; 10/11
   530  c41e fe                         !byte $fe ; 01/11
   531  c41f e0                         !byte $e0 ; 11/11
   532                          
   533                          title: 
   534  c420 9312                   !byte 147,18
   535                              ;               1         2         3         4
   536                              ;      1234567890123456789012345678901234567890
   537  c422 4c41524745205459...    !text "LARGE TYPE EDITOR                       ",146
   538  c44b 2843292032303235...    !text "(C) 2025 DAVID R. VAN WAGNER",13
   539  c468 4749544855422e43...    !text "GITHUB.COM/DAVERVW",13
   540  c47b 4441564556572e43...    !text "DAVEVW.COM",13
   541  c486 00                     !byte 0
   542                          
   543                          finish:
